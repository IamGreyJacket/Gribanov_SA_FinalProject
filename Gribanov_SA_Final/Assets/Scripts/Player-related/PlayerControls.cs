//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/Player-related/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Racer
{
    public partial class @PlayerControls : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Car"",
            ""id"": ""a3dd6746-00ad-46dc-8754-f88e73bb98b8"",
            ""actions"": [
                {
                    ""name"": ""Acceleration"",
                    ""type"": ""Button"",
                    ""id"": ""1cdc1231-7aca-449f-bef9-991855416fd3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Brakes"",
                    ""type"": ""Button"",
                    ""id"": ""99ed677f-2173-4425-ae74-ddd4cac03e1f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HandBrake"",
                    ""type"": ""Button"",
                    ""id"": ""438824cf-4919-4598-871f-2b000dcae19a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Flip"",
                    ""type"": ""Button"",
                    ""id"": ""78299b9c-3993-4af5-8b8f-b1cc5f3bfa91"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Steering"",
                    ""type"": ""Button"",
                    ""id"": ""b0b66702-31fa-481f-901e-4b19392bde99"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Gear Up"",
                    ""type"": ""Button"",
                    ""id"": ""9f8fcd48-9a92-4d4c-835f-4aa00aa306a3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Gear Down"",
                    ""type"": ""Button"",
                    ""id"": ""4268dc04-eb5a-4018-ba45-e835d1f6574f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WX"",
                    ""id"": ""31bd42ab-3545-4b49-9490-cf5c0dccfbb9"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Acceleration"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""932ba36c-81ed-44d4-a78d-8be0ba663b84"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Acceleration"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""9654b0aa-f281-4f8c-847a-d37a34eb9a63"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Acceleration"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""18020aa7-aff2-463c-b4eb-3b8d5bae2707"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Brakes"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9f611181-459e-4c78-988a-f3d35aa5df99"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HandBrake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9b62928e-63c5-46e0-9bd9-aa22a9077e05"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Flip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""AD"",
                    ""id"": ""6429db64-c8cb-4095-9d47-44b6510ea96f"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""5f3e9d23-2c7c-42e5-aef1-fea48b418c72"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""e95dd9a5-6985-4421-9cf5-88d5d8d1c5e0"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a134e58f-bfcf-4bb4-90f5-d887c8840314"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Gear Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cd902e90-096d-4b5b-8c54-b20eafa40704"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Gear Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Base"",
            ""id"": ""308c721c-8bb1-447d-b5e9-fd2dec6ae6bc"",
            ""actions"": [
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""e268e220-a406-4e31-9d78-6445e2f3f5f1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""P"",
                    ""type"": ""Button"",
                    ""id"": ""f66ac8c3-8d00-464d-ba1c-39a0894676d9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""437af851-86a2-420c-ad88-a4a7786a68a4"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4ee04e41-cf62-45ff-bb32-330b1300c433"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""P"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Car
            m_Car = asset.FindActionMap("Car", throwIfNotFound: true);
            m_Car_Acceleration = m_Car.FindAction("Acceleration", throwIfNotFound: true);
            m_Car_Brakes = m_Car.FindAction("Brakes", throwIfNotFound: true);
            m_Car_HandBrake = m_Car.FindAction("HandBrake", throwIfNotFound: true);
            m_Car_Flip = m_Car.FindAction("Flip", throwIfNotFound: true);
            m_Car_Steering = m_Car.FindAction("Steering", throwIfNotFound: true);
            m_Car_GearUp = m_Car.FindAction("Gear Up", throwIfNotFound: true);
            m_Car_GearDown = m_Car.FindAction("Gear Down", throwIfNotFound: true);
            // Base
            m_Base = asset.FindActionMap("Base", throwIfNotFound: true);
            m_Base_Escape = m_Base.FindAction("Escape", throwIfNotFound: true);
            m_Base_P = m_Base.FindAction("P", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Car
        private readonly InputActionMap m_Car;
        private ICarActions m_CarActionsCallbackInterface;
        private readonly InputAction m_Car_Acceleration;
        private readonly InputAction m_Car_Brakes;
        private readonly InputAction m_Car_HandBrake;
        private readonly InputAction m_Car_Flip;
        private readonly InputAction m_Car_Steering;
        private readonly InputAction m_Car_GearUp;
        private readonly InputAction m_Car_GearDown;
        public struct CarActions
        {
            private @PlayerControls m_Wrapper;
            public CarActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Acceleration => m_Wrapper.m_Car_Acceleration;
            public InputAction @Brakes => m_Wrapper.m_Car_Brakes;
            public InputAction @HandBrake => m_Wrapper.m_Car_HandBrake;
            public InputAction @Flip => m_Wrapper.m_Car_Flip;
            public InputAction @Steering => m_Wrapper.m_Car_Steering;
            public InputAction @GearUp => m_Wrapper.m_Car_GearUp;
            public InputAction @GearDown => m_Wrapper.m_Car_GearDown;
            public InputActionMap Get() { return m_Wrapper.m_Car; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(CarActions set) { return set.Get(); }
            public void SetCallbacks(ICarActions instance)
            {
                if (m_Wrapper.m_CarActionsCallbackInterface != null)
                {
                    @Acceleration.started -= m_Wrapper.m_CarActionsCallbackInterface.OnAcceleration;
                    @Acceleration.performed -= m_Wrapper.m_CarActionsCallbackInterface.OnAcceleration;
                    @Acceleration.canceled -= m_Wrapper.m_CarActionsCallbackInterface.OnAcceleration;
                    @Brakes.started -= m_Wrapper.m_CarActionsCallbackInterface.OnBrakes;
                    @Brakes.performed -= m_Wrapper.m_CarActionsCallbackInterface.OnBrakes;
                    @Brakes.canceled -= m_Wrapper.m_CarActionsCallbackInterface.OnBrakes;
                    @HandBrake.started -= m_Wrapper.m_CarActionsCallbackInterface.OnHandBrake;
                    @HandBrake.performed -= m_Wrapper.m_CarActionsCallbackInterface.OnHandBrake;
                    @HandBrake.canceled -= m_Wrapper.m_CarActionsCallbackInterface.OnHandBrake;
                    @Flip.started -= m_Wrapper.m_CarActionsCallbackInterface.OnFlip;
                    @Flip.performed -= m_Wrapper.m_CarActionsCallbackInterface.OnFlip;
                    @Flip.canceled -= m_Wrapper.m_CarActionsCallbackInterface.OnFlip;
                    @Steering.started -= m_Wrapper.m_CarActionsCallbackInterface.OnSteering;
                    @Steering.performed -= m_Wrapper.m_CarActionsCallbackInterface.OnSteering;
                    @Steering.canceled -= m_Wrapper.m_CarActionsCallbackInterface.OnSteering;
                    @GearUp.started -= m_Wrapper.m_CarActionsCallbackInterface.OnGearUp;
                    @GearUp.performed -= m_Wrapper.m_CarActionsCallbackInterface.OnGearUp;
                    @GearUp.canceled -= m_Wrapper.m_CarActionsCallbackInterface.OnGearUp;
                    @GearDown.started -= m_Wrapper.m_CarActionsCallbackInterface.OnGearDown;
                    @GearDown.performed -= m_Wrapper.m_CarActionsCallbackInterface.OnGearDown;
                    @GearDown.canceled -= m_Wrapper.m_CarActionsCallbackInterface.OnGearDown;
                }
                m_Wrapper.m_CarActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Acceleration.started += instance.OnAcceleration;
                    @Acceleration.performed += instance.OnAcceleration;
                    @Acceleration.canceled += instance.OnAcceleration;
                    @Brakes.started += instance.OnBrakes;
                    @Brakes.performed += instance.OnBrakes;
                    @Brakes.canceled += instance.OnBrakes;
                    @HandBrake.started += instance.OnHandBrake;
                    @HandBrake.performed += instance.OnHandBrake;
                    @HandBrake.canceled += instance.OnHandBrake;
                    @Flip.started += instance.OnFlip;
                    @Flip.performed += instance.OnFlip;
                    @Flip.canceled += instance.OnFlip;
                    @Steering.started += instance.OnSteering;
                    @Steering.performed += instance.OnSteering;
                    @Steering.canceled += instance.OnSteering;
                    @GearUp.started += instance.OnGearUp;
                    @GearUp.performed += instance.OnGearUp;
                    @GearUp.canceled += instance.OnGearUp;
                    @GearDown.started += instance.OnGearDown;
                    @GearDown.performed += instance.OnGearDown;
                    @GearDown.canceled += instance.OnGearDown;
                }
            }
        }
        public CarActions @Car => new CarActions(this);

        // Base
        private readonly InputActionMap m_Base;
        private IBaseActions m_BaseActionsCallbackInterface;
        private readonly InputAction m_Base_Escape;
        private readonly InputAction m_Base_P;
        public struct BaseActions
        {
            private @PlayerControls m_Wrapper;
            public BaseActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Escape => m_Wrapper.m_Base_Escape;
            public InputAction @P => m_Wrapper.m_Base_P;
            public InputActionMap Get() { return m_Wrapper.m_Base; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(BaseActions set) { return set.Get(); }
            public void SetCallbacks(IBaseActions instance)
            {
                if (m_Wrapper.m_BaseActionsCallbackInterface != null)
                {
                    @Escape.started -= m_Wrapper.m_BaseActionsCallbackInterface.OnEscape;
                    @Escape.performed -= m_Wrapper.m_BaseActionsCallbackInterface.OnEscape;
                    @Escape.canceled -= m_Wrapper.m_BaseActionsCallbackInterface.OnEscape;
                    @P.started -= m_Wrapper.m_BaseActionsCallbackInterface.OnP;
                    @P.performed -= m_Wrapper.m_BaseActionsCallbackInterface.OnP;
                    @P.canceled -= m_Wrapper.m_BaseActionsCallbackInterface.OnP;
                }
                m_Wrapper.m_BaseActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Escape.started += instance.OnEscape;
                    @Escape.performed += instance.OnEscape;
                    @Escape.canceled += instance.OnEscape;
                    @P.started += instance.OnP;
                    @P.performed += instance.OnP;
                    @P.canceled += instance.OnP;
                }
            }
        }
        public BaseActions @Base => new BaseActions(this);
        public interface ICarActions
        {
            void OnAcceleration(InputAction.CallbackContext context);
            void OnBrakes(InputAction.CallbackContext context);
            void OnHandBrake(InputAction.CallbackContext context);
            void OnFlip(InputAction.CallbackContext context);
            void OnSteering(InputAction.CallbackContext context);
            void OnGearUp(InputAction.CallbackContext context);
            void OnGearDown(InputAction.CallbackContext context);
        }
        public interface IBaseActions
        {
            void OnEscape(InputAction.CallbackContext context);
            void OnP(InputAction.CallbackContext context);
        }
    }
}
